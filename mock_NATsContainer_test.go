// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package gronats

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/testcontainers/testcontainers-go"
)

// NewMockNATsContainer creates a new instance of MockNATsContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNATsContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNATsContainer {
	mock := &MockNATsContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNATsContainer is an autogenerated mock type for the NATsContainer type
type MockNATsContainer struct {
	mock.Mock
}

type MockNATsContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNATsContainer) EXPECT() *MockNATsContainer_Expecter {
	return &MockNATsContainer_Expecter{mock: &_m.Mock}
}

// ConnectionString provides a mock function for the type MockNATsContainer
func (_mock *MockNATsContainer) ConnectionString(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ConnectionString")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNATsContainer_ConnectionString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectionString'
type MockNATsContainer_ConnectionString_Call struct {
	*mock.Call
}

// ConnectionString is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNATsContainer_Expecter) ConnectionString(ctx interface{}) *MockNATsContainer_ConnectionString_Call {
	return &MockNATsContainer_ConnectionString_Call{Call: _e.mock.On("ConnectionString", ctx)}
}

func (_c *MockNATsContainer_ConnectionString_Call) Run(run func(ctx context.Context)) *MockNATsContainer_ConnectionString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNATsContainer_ConnectionString_Call) Return(s string, err error) *MockNATsContainer_ConnectionString_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockNATsContainer_ConnectionString_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockNATsContainer_ConnectionString_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type MockNATsContainer
func (_mock *MockNATsContainer) Terminate(ctx context.Context, opts ...testcontainers.TerminateOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, opts)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...testcontainers.TerminateOption) error); ok {
		r0 = returnFunc(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNATsContainer_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type MockNATsContainer_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...testcontainers.TerminateOption
func (_e *MockNATsContainer_Expecter) Terminate(ctx interface{}, opts ...interface{}) *MockNATsContainer_Terminate_Call {
	return &MockNATsContainer_Terminate_Call{Call: _e.mock.On("Terminate",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockNATsContainer_Terminate_Call) Run(run func(ctx context.Context, opts ...testcontainers.TerminateOption)) *MockNATsContainer_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []testcontainers.TerminateOption
		var variadicArgs []testcontainers.TerminateOption
		if len(args) > 1 {
			variadicArgs = args[1].([]testcontainers.TerminateOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockNATsContainer_Terminate_Call) Return(err error) *MockNATsContainer_Terminate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNATsContainer_Terminate_Call) RunAndReturn(run func(ctx context.Context, opts ...testcontainers.TerminateOption) error) *MockNATsContainer_Terminate_Call {
	_c.Call.Return(run)
	return _c
}
